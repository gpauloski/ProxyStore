Contributing
############

Getting Started for Local Development
-------------------------------------

We recommend using Tox to setup the development environment. This will
create a new virtual environment with all of the required packages installed
and ProxyStore installed in editable mode.

.. code-block:: bash

   $ git clone https://github.com/proxystore/proxystore
   $ cd ProxyStore
   $ tox --devenv venv -e py39
   $ . venv/bin/activate

.. warning::

   Running Tox in a Conda environment is possible but it may conflict with
   Tox's ability to find the correct Python versions. E.g., if your
   Conda environment is Python 3.9, running :code:`$ tox -e p38` may still use
   Python 3.9.

ProxyStore uses `pre-commit <https://pre-commit.com/>`_ and
`Tox <https://tox.wiki/en/latest/index.html>`_ for continuous integration
(test, linting, etc.).
To use pre-commit, install the hook and then run against files.

.. code-block:: bash

   $ pre-commit install
   $ pre-commit run --all-files

The Python code and docstring format mostly follows Google's
`Python Style Guide <https://google.github.io/styleguide/pyguide.html>`_,
but the pre-commit config is the authoritative source for code format
compliance.

The entire CI workflow can be run with :code:`$ tox`.
This will test against multiple versions of Python and can be slow.

Module-level unit-test are located in the :code:`tests/` directory and its
structure is intended to match that of :code:`proxystore/`.
E.g. the tests for :code:`proxystore/store/cache.py` are located in
:code:`tests/store/cache_test.py`; however, additional test files can be added
as needed. Tests should be narrowly focused and target a single aspect of the
code's functionality, tests should not test internal implementation details of
the code, and tests should not be dependent on the order in which they are run.

Code that is useful for building tests but is not a test itself belongs in the
:code:`testing/` directory.

.. code-block:: bash

   # Run all tests in tests/
   $ tox -e py39
   # Run a specific test
   $ tox -e py39 -- tests/factory_test.py::test_lambda_factory

If code changes require an update to the documentation (e.g., for function
signature changes, new modules, etc.), the documentation can be built with
:code:`$ tox -e docs`.

The compiled docs can be opened in a browser with
:code:`docs/_build/html/index.html`. Docstrings for existing modules should be
autogenerated. For new modules, a new :code:`.rst` needs to be created in
:code:`docs/source/`, and the reference needs to be added to the correct table
of contents.

Issues
------

We use GitHub issues to report problems, request and track changes, and discuss
future ideas.

If you open an issue for a specific problem, please follow the template guides.

Pull Requests
-------------

We use the standard GitHub contribution cycle.

1. Fork the repository and clone to your local machine
2. Create local changes

   - Changes should conform to the style and testing guidelines, referenced
     above.
   - Commit messages should start with a sentence describing the changes
     followed by a blank line then a detailed description of what changed and
     why.

3. Push commits to your fork

   - Please squash commits fixing mistakes to keep the git history clean.
     For example, if commit "b" follows commit "a" and only fixes a small typo
     from "a", please squash "a" and "b" into a single, correct commit.
4. Open a pull request in this repository

   - The pull request should include a description of the motivation for the
     PR and included changes. A PR template is provided to guide this process.


Release Instructions
--------------------

1. Choose the next version number, referred to as :code:`{VERSION}` for the
   rest of the instructions. ProxyStore versioning follows semver
   (*major.minor.patch*) with optional `PEP-440 <https://peps.python.org/pep-0440>`_
   pre-release/post-release/dev-release segments. Major/minor/patch numbers
   start at 0 and pre-release/post-release/dev-release segments start at 1.
2. Update the versions in :code:`proxystore/__init__.py` and :code:`setup.py`
   to :code:`{VERSION}`.
3. If this is a full release, add a changelog entry to
   :code:`docs/changelog.rst`.
4. Verify the versions match with
   :code:`python version_check.py {VERSION}`.
5. Commit and merge the version updates/changelogs into main.
6. Tag the release commit and push (typically this is the commit updating the
   version numbers).

   .. code-block:: bash

      $ git tag -a v{VERSION} -m "ProxyStore {VERSION}"
      $ git push origin v{VERSION}

   Note the version number is prepended by "v" for the tags so we can
   distinguish release tags from non-release tags.
7. Build the package and upload to PyPI.

   .. code-block:: bash

      $ rm dist/*
      $ python -m build
      $ python -m twine upload dist/*

8. Create a new release on GitHub using the tag. The ReadTheDocs changelog
   is typically copied into the body, and the files in :code:`dist/*` are
   uploaded as well. See previous releases for the template.
